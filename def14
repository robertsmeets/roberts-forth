HEX: CR D EMIT A EMIT ;: [ 0 STATE ! ; IMMEDIATE: ] 1 STATE ! ; IMMEDIATE: VARIABLE CREATE 2 ALLOT ;: DO COMPILE (DO) HERE ; IMMEDIATE: LOOP COMPILE (LOOP) 4C C, , ; IMMEDIATE: AGAIN 4C C, , ; IMMEDIATE: UNTIL COMPILE 0BRANCH 4C C, , ; IMMEDIATE: +LOOP COMPILE (+LOOP) 4C C, , ; IMMEDIATE: IF COMPILE 0BRANCH 4C C, HERE 0 , ; IMMEDIATE: THEN HERE SWAP ! ; IMMEDIATE: ELSE 4C C, 0 , HERE SWAP ! HERE 2- ; IMMEDIATE: WHILE [COMPILE] IF ; IMMEDIATE: BEGIN [COMPILE] IF ; IMMEDIATE: REPEAT 4C C, SWAP , [COMPILE] THEN ; IMMEDIATE: 2DROP DROP DROP ;: ERRDEF CR CR TYPE CR *EXEC \ ;: ER> FIND ERVEK ! ;ER> ERRDEF: MOVE 2* CMOVE ;DECIMAL: ASCII 32 WORD 1+ C@ STATE @ IF [COMPILE] LITERAL THEN ; IMMEDIATE: ( ASCII ) WORD DROP ; IMMEDIATE: COUNT DUP C@ SWAP 1+ SWAP ;: -ROT ROT ROT ;: FILL >R OVER + SWAP DO J I C! LOOP R> DROP ;: CONV ( cijfer --- getal ; zet ascii om in waarde )DUP ASCII A 1- > IF [ ASCII A 10 - ] LITERALELSE ASCII 0 - THEN ;: PAK ( --- getal ; pak het volgende als hex getal )32 WORD COUNT 2 - IF ." Geen 2-cijferig hex getal" ABORT THENDUP C@ CONV 16 * SWAP 1+ C@ CONV + ;: PAK4 ( --- getal ; pak het volgende als 4cijferig hex getal )32 WORD COUNT 4 - IF ." Geen 4-cijferig hex getal" ABORT THEN0 4 0 DO 16 * SWAP DUP I + C@ CONV ROT + LOOP SWAP DROP ;HEX: LDA# PAK A9 C, C, ; IMMEDIATE: LDX# PAK A2 C, C, ; IMMEDIATE: LDY# PAK A0 C, C, ; IMMEDIATE: JSR PAK4 20 C, , ; IMMEDIATE560 CONSTANT FARRAY565 CONSTANT FSET: FSC FARRAY FSET @ + ;: FS@ FSC C@ ;: FS! FSC C! ;: FSET! FSET ! ;: FO 0 FSET! ;: Fl 1 FSET! ;: F2 2 FSET! ;: F3 3 FSET! ;: F4 4 FSET! ;F0FFCE CONSTANT OSFINDFFDA CONSTANT OSARGS60 CONSTANT 0PAGEDECIMAL: OPEN 32 WORD COUNT OVER + 13 SWAP C!SWAP OSFIND CALL FS! DROP ;HEX: OPENOUT 80 OPEN ;: OPENIN 40 OPEN ;: OPENUP C0 OPEN ;: FS@256* FS@ 100 * ;: BPUT FS@256* SWAP FFD4 CALL 2DROP ;: BGET FS@256* 0 FFD7 CALL SWAP DROP ;: CLOSER 0 OSFIND CALL 2DROP ;: CLOSE FS@256* CLOSER ;: CLOSE0 0 CLOSER ;: ARGS OSARGS CALL 2DROP ;: PTR> FS@256* 0PAGE + 0 ARGS 0PAGE 2+ @ 0PAGE @ ;: >PTR 0PAGE ! 0PAGE 2+ ! FS@256* 0PAGE + 1 ARGS ;: EXT FS@256* 0PAGE + 2 ARGS 0PAGE 2+ @ 0PAGE @ ;: EOF FS@ 1 21E @ CALL DROP 1 AND ;: ID. DUP C@ 7F AND SWAP 1+ SWAP TYPE ;: NOT 0= ;: >NAME 6 - DUP >R 0 >R BEGIN R> DROP DUP R@ - -82 > >R DUP DUP C@7F AND + RR@ = NOT R@ AND WHILE 1- REPEATR> NOT R> DROP IF ." >NAME : Geen naam gevonden" CR ABORT THEN ;: >BODY 3 + ;: ['] COMPILE ' ; IMMEDIATE: NIETS ; 0 , ( --- ; doe niets ; 0, is nodig om evt. te herdefinieren ): CODE  ( --- ; voegt het volgende woord in invoersliert )  ( met lege inhoud toe aan woordenschat )[COMPILE] [ ;  : VEKTOR ( --- ; maakt een vektor met naam uit invoersliert ) ; ( die wijst naar NIETS )CODE 4C C, [ FIND NIETS ] LITERAL , ;: MAAK ( --- ; herdefinieer woord uit invoersliert als ) ( 2e woord uit invoersliert )FIND DUP 4C SWAP C! 1+ FIND SWAP ! ;: COMPVEK ( --- ; tijdens vertalen: vertaal het woord waar ) ( de vektor, genoemd in de invoersliert naar wijst )FIND 1+ @ 20 C, , ; IMMEDIATE: MAAKVEK ( --- ; de waarde van de eerste vektor in de invoersliert ) ( wordt gelijk aan de waarde van de tweede )FIND 1+ FIND 1+ @ SWAP ! ;FFF1 CONSTANT OSWORD( The Pad )( At a certain distance from HERE in your dictionary, you will find a small )( region of memory called the “pad.” Like a scratch pad, it is usually used )( to hold ASCII character strings that are being manipulated prior to being )( sent out to a terminal. For example, the number formatting words use )( the pad to hold the ASCII numerals during the conversion process, prior )( to TYPE. )( The size of the pad is indefinite. In most systems there are hundreds of )( kilobytes between the beginning of the pad and the top of the )( parameter stack. )( Since the pad’s beginning address is defined relative to the last )( dictionary entry, it moves every time you add a new definition or execute )( FORGET or MARKER. This arrangement proves safe, however, because the pad )( is never used when any of these events are occurring. The word PAD )( returns the current address of the beginning of the pad. It is )( defined simply: )( : PAD   HERE 340 + ; )( that is, it returns an address that is a fixed number of bytes )( beyond HERE. The actual number varies.): PAD HERE 340 + ;: >TIME ( lb 2b 2b --- ; zet interne klok )PAD ! PAD 2+ ! PAD 4 + C! PAD 2 OSWORD CALL 2DROP ;: TIME> ( --- lb 2b 2b ; lees interne klok ).PAD 1 OSWORD CALL 2DROP PAD 4 + C@ PAD 2+ @ PAD @ ;: (")R> 1+ DUP DUP C@ + >R ;: INKLUDEER ( adr --- ; zet getelde string op HERE )DUP C@ 1+ SWAP OVER HERE SWAP CMOVE ALLOT ;: " ( --- adr ; laat bij uitvoering het adres van een ) ( getelde string staan; anders = ASCII " WORD )ASCII " WORD STATE @ IF COMPILE (") INKLUDEER THEN ;IMMEDIATE: ERROR" ASCII " WORD 0 C, INKLUDEER 0 C, ; IMMEDIATEDECIMAL: OPSTART CR CR ." Robert's Forth" CR CR START ;3 MODE WORDSSAVE FORTH